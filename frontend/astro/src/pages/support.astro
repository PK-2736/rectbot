---
import BaseLayout from '../layouts/BaseLayout.astro'
const title = 'お問い合わせ - Rectbot'
// Capture build-time env values so they are inlined by Astro during build.
const PUBLIC_API_BASE_URL_BUILD = import.meta.env.PUBLIC_API_BASE_URL || '';
const PUBLIC_RECAPTCHA_SITE_KEY_BUILD = import.meta.env.PUBLIC_RECAPTCHA_SITE_KEY || null;
---

<BaseLayout title={title}>
  <main class="max-w-3xl mx-auto px-4 py-12">
    <h1 class="text-3xl font-bold mb-4">お問い合わせ</h1>
  <p class="text-sm text-gray-600 mb-6">ご質問・ご要望・不具合報告はこちらから送信してください。可能な限り早く確認し、必要であればメールでご連絡します。送信後は確認のため Discord に通知が届きます。</p>

    <form id="support-form" class="space-y-4 bg-white p-6 rounded-lg shadow">
      <div>
        <label class="block text-sm font-medium text-gray-700">お名前 <span class="text-red-500">*</span></label>
        <input id="name" name="name" required class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500" />
      </div>

      <div>
        <label class="block text-sm font-medium text-gray-700">メールアドレス <span class="text-red-500">*</span></label>
        <input id="email" name="email" type="email" required class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500" />
      </div>

      <div>
        <label class="block text-sm font-medium text-gray-700">お問い合わせ内容 <span class="text-red-500">*</span></label>
  <textarea id="message" name="message" rows="6" placeholder="不具合の場合は再現手順・発生時刻・環境（OS/ブラウザ/Discordアプリ等）をできるだけ詳しくご記入ください。" required class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500"></textarea>
      </div>

      <div class="flex items-center justify-between">
        <button id="submit-btn" type="submit" class="inline-flex items-center px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700">送信</button>
        <div id="form-status" class="text-sm text-gray-600"></div>
      </div>
    </form>
    <!-- build-time values injected into data attributes to safely pass to client script -->
    <div id="support-data" data-api-base={PUBLIC_API_BASE_URL_BUILD} data-recaptcha-key={PUBLIC_RECAPTCHA_SITE_KEY_BUILD} style="display:none"></div>

  <script type="module" client:load>
      const form = document.getElementById('support-form');
      const statusEl = document.getElementById('form-status');
      const submitBtn = document.getElementById('submit-btn');

      // Read build-time injected values from the DOM (safe and avoids server-expression syntax in scripts)
      const _dataEl = document.getElementById('support-data');
      const API_BASE = (_dataEl && _dataEl.dataset && _dataEl.dataset.apiBase) ? _dataEl.dataset.apiBase : '';
      const RECAPTCHA_SITE_KEY = (_dataEl && _dataEl.dataset) ? (_dataEl.dataset.recaptchaKey || null) : null;

      const API_URL = API_BASE ? `${API_BASE.replace(/\/$/, '')}/api/support` : '/api/support';

  // If no build-time API base is set and the site is running on the main domain,
  // prefer the dedicated API subdomain so requests reach the Worker (avoid Pages returning 405).
  try {
    if (!API_BASE && typeof window !== 'undefined' && window.location && window.location.hostname) {
      const host = window.location.hostname;
      if (host === 'rectbot.tech' || host === 'www.rectbot.tech') {
        API_URL = 'https://api.rectbot.tech/api/support';
      }
    }
  } catch (e) {
    // ignore
  }

      form.addEventListener('submit', async (e) => {
        e.preventDefault();
        statusEl.textContent = '';
        submitBtn.disabled = true;
        submitBtn.textContent = '送信中...';

        // より堅牢にフォーム値を取得（ブラウザ差分や将来的な DOM 変更に備える）
        const getValue = (selector) => {
          const el = form.querySelector(selector);
          if (!el) return '';
          return (el.value || '').toString().trim();
        };

        // Try to commit composition (IME) by blurring the message field, then read values via FormData
        const messageEl = form.querySelector('textarea[name="message"]');
        try { if (messageEl && typeof messageEl.blur === 'function') messageEl.blur(); } catch(e) { console.warn('blur failed', e); }

        // Use FormData first (more reliable), fall back to getValue()
        const fd = new FormData(form);
        const fdName = (fd.get('name') || '').toString().trim();
        const fdEmail = (fd.get('email') || '').toString().trim();
        const fdMessage = (fd.get('message') || '').toString().trim();

        const payload = {
          name: fdName || getValue('input[name="name"]'),
          email: fdEmail || getValue('input[name="email"]'),
          message: fdMessage || (messageEl ? (messageEl.value || '').toString().trim() : getValue('textarea[name="message"]')),
        };

        // Detailed debug: show element and collected values
        console.debug('messageEl', messageEl);
        if (messageEl) console.debug('messageEl.value (raw):', messageEl.value);
        console.debug('FormData values:', { fdName, fdEmail, fdMessage });
        console.debug('Final payload before send:', payload);

        // クライアント側バリデーション
        if (!payload.name) {
          statusEl.textContent = 'お名前を入力してください。';
          statusEl.className = 'text-sm text-red-600';
          submitBtn.disabled = false;
          submitBtn.textContent = '送信';
          return;
        }
        if (!payload.email) {
          statusEl.textContent = 'メールアドレスを入力してください。';
          statusEl.className = 'text-sm text-red-600';
          submitBtn.disabled = false;
          submitBtn.textContent = '送信';
          return;
        }
        if (!payload.message) {
          statusEl.textContent = 'お問い合わせ内容を入力してください。詳しく書くほど対応が早くなります。';
          statusEl.className = 'text-sm text-red-600';
          submitBtn.disabled = false;
          submitBtn.textContent = '送信';
          return;
        }

        // デバッグ用ログ（ブラウザコンソール）
        console.debug('Support form payload:', payload);

        try {
          // reCAPTCHA v3 トークンを取得してペイロードに付与
          if (RECAPTCHA_SITE_KEY && window.grecaptcha) {
            await new Promise((resolve) => {
              grecaptcha.ready(async () => {
                try {
                  const token = await grecaptcha.execute(RECAPTCHA_SITE_KEY, { action: 'support_form' });
                  payload.recaptchaToken = token;
                } catch (e) {
                  console.warn('reCAPTCHA token failed', e);
                } finally { resolve(); }
              });
            });
          }

          // Use AbortController to avoid hanging requests and to detect message-port-close style failures
          const controller = new AbortController();
          const timeoutMs = 15000; // 15s timeout
          const timeoutId = setTimeout(() => controller.abort(), timeoutMs);

          let res;
          try {
            res = await fetch(API_URL, {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify(payload),
              signal: controller.signal,
            });
          } catch (networkErr) {
            console.error('Network/fetch error:', networkErr);
            statusEl.textContent = '送信中にネットワークエラーが発生しました。後でもう一度お試しください。';
            statusEl.className = 'text-sm text-red-600';
            clearTimeout(timeoutId);
            return;
          } finally {
            clearTimeout(timeoutId);
          }

          if (res.ok) {
            const json = await res.json();
            statusEl.textContent = json.message || '送信が完了しました。ありがとうございます！';
            statusEl.className = 'text-sm text-green-600';
            form.reset();
          } else {
            // read response body for debugging (best effort)
            let text = '';
            try { text = await res.text(); } catch (e) { text = `<body-read-error: ${e.message}>`; }
            console.warn('Support API returned non-ok status', res.status, text);
            statusEl.textContent = `送信に失敗しました: ${res.status} ${text}`;
            statusEl.className = 'text-sm text-red-600';
          }
        } catch (err) {
          console.error(err);
          statusEl.textContent = '送信中にエラーが発生しました。後でもう一度お試しください。';
          statusEl.className = 'text-sm text-red-600';
        } finally {
          submitBtn.disabled = false;
          submitBtn.textContent = '送信';
        }
      });
    </script>
    
      <!-- reCAPTCHA v3 を動的に読み込む（サイトキーがある場合のみ） -->
      <script>
        (function(){
          // Read the build-time injected key from the hidden data element to avoid server-expression syntax
          const _dataEl = document.getElementById('support-data');
          const finalKey = (_dataEl && _dataEl.dataset) ? (_dataEl.dataset.recaptchaKey || null) : null;
          if (!finalKey) return;
          const s = document.createElement('script');
          s.src = `https://www.google.com/recaptcha/api.js?render=${finalKey}`;
          s.defer = true;
          document.head.appendChild(s);
        })();
      </script>
  </main>
</BaseLayout>
