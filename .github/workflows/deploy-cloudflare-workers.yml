name: Deploy to Cloudflare Workers
on:
  push:
    branches:
      - "main"
    paths:
      - "backend/**"
    # frontend配下の変更ではこのworkflowはトリガーされません
      
  workflow_dispatch:

jobs:
  cloudflare-deploy:
    runs-on: ubuntu-latest
    # 統一されたAPIトークンを使用
    env:
      CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
      - name: Install Bun
        run: curl -fsSL https://bun.sh/install | bash
        shell: bash
      - name: Add Bun to PATH
        run: echo "$HOME/.bun/bin" >> $GITHUB_PATH
        shell: bash
      - name: Install dependencies
        run: |
          cd backend
          bun install
      - name: Install Wrangler
        run: cd backend && npm install wrangler
        
      - name: Ensure wrangler secrets from GitHub Secrets
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        run: |
          cd backend
          set -euo pipefail
          echo "Registering available secrets to Cloudflare (wrangler)..."
          # helper function: register if non-empty
          register_secret(){
            name="$1"
            value="${!2}"
            if [ -n "${value}" ]; then
              echo "Registering $name"
              # retry up to 3 times on transient failures
              attempts=0
              until [ $attempts -ge 3 ]
              do
                printf "%s" "${value}" | npx wrangler secret put "$name" && break
                attempts=$((attempts+1))
                echo "Retry $attempts for $name..."
                sleep 1
              done
            else
              echo "Skipping $name (empty)"
            fi
          }

          # Map of secret variable names -> GitHub secrets (environment variables expanded by Actions)
          # Use bash indirection to read the corresponding GitHub Action secret env
          DISCORD_CLIENT_SECRET="${{ secrets.DISCORD_CLIENT_SECRET }}"
          SUPABASE_SERVICE_ROLE_KEY="${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}"
          SUPABASE_URL="${{ secrets.SUPABASE_URL }}"
          REACT_APP_DISCORD_CLIENT_ID="${{ secrets.REACT_APP_DISCORD_CLIENT_ID }}"
          REACT_APP_DISCORD_REDIRECT_URI="${{ secrets.REACT_APP_DISCORD_REDIRECT_URI }}"
          INTERNAL_SECRET="${{ secrets.INTERNAL_SECRET }}"
          EXPRESS_CLIENT_ID="${{ secrets.EXPRESS_CLIENT_ID }}"
          EXPRESS_CLIENT_SECRET="${{ secrets.EXPRESS_CLIENT_SECRET }}"
          SERVICE_TOKEN="${{ secrets.SERVICE_TOKEN }}"
          EXPRESS_ORIGIN="${{ secrets.EXPRESS_ORIGIN }}"

          register_secret DISCORD_CLIENT_SECRET DISCORD_CLIENT_SECRET
          register_secret SUPABASE_SERVICE_ROLE_KEY SUPABASE_SERVICE_ROLE_KEY
          register_secret SUPABASE_URL SUPABASE_URL
          register_secret REACT_APP_DISCORD_CLIENT_ID REACT_APP_DISCORD_CLIENT_ID
          register_secret REACT_APP_DISCORD_REDIRECT_URI REACT_APP_DISCORD_REDIRECT_URI
          register_secret INTERNAL_SECRET INTERNAL_SECRET
          register_secret EXPRESS_CLIENT_ID EXPRESS_CLIENT_ID
          register_secret EXPRESS_CLIENT_SECRET EXPRESS_CLIENT_SECRET
          register_secret SERVICE_TOKEN SERVICE_TOKEN
          register_secret EXPRESS_ORIGIN EXPRESS_ORIGIN

      - name: Deploy to Cloudflare Workers
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        run: |
          cd backend
          npx wrangler deploy --compatibility-date=2024-01-01
          
      - name: Update secrets only if needed (optional)
        if: github.event_name == 'workflow_dispatch'
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        run: |
          cd backend
          # 手動トリガー時のみSecretを更新
          echo "Updating secrets..."
          echo "${{ secrets.DISCORD_CLIENT_SECRET }}" | npx wrangler secret put DISCORD_CLIENT_SECRET || echo "DISCORD_CLIENT_SECRET update skipped"
          echo "${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" | npx wrangler secret put SUPABASE_SERVICE_ROLE_KEY || echo "SUPABASE_SERVICE_ROLE_KEY update skipped"
          echo "${{ secrets.REACT_APP_DISCORD_CLIENT_ID }}" | npx wrangler secret put REACT_APP_DISCORD_CLIENT_ID || echo "REACT_APP_DISCORD_CLIENT_ID update skipped"
          echo "${{ secrets.REACT_APP_DISCORD_REDIRECT_URI }}" | npx wrangler secret put REACT_APP_DISCORD_REDIRECT_URI || echo "REACT_APP_DISCORD_REDIRECT_URI update skipped"
          echo "${{ secrets.SUPABASE_URL }}" | npx wrangler secret put SUPABASE_URL || echo "SUPABASE_URL update skipped"
          # Optional: register internal secret used to authenticate Worker->Origin requests
          echo "${{ secrets.INTERNAL_SECRET }}" | npx wrangler secret put INTERNAL_SECRET || echo "INTERNAL_SECRET update skipped"
          # Optional: register the origin URL as a secret/var if you prefer; useful to ensure Express origin is set in the Worker
          echo "${{ secrets.EXPRESS_ORIGIN }}" | npx wrangler secret put EXPRESS_ORIGIN || echo "EXPRESS_ORIGIN update skipped"
          
      - name: Final deployment verification
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        run: |
          cd backend
          echo "Deployment completed successfully!"
          npx wrangler --version
