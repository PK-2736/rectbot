name: Deploy to Cloudflare Pages
on:

  push:
    branches:
      - "main"
    paths:
      - "frontend/**"
      
  workflow_dispatch:

jobs:
  cloudflare-pages-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      deployments: write
    env:
      CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
      - name: Check required GitHub Secrets
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          NEXT_PUBLIC_API_BASE_URL: ${{ secrets.NEXT_PUBLIC_API_BASE_URL }}
          PUBLIC_RECAPTCHA_SITE_KEY: ${{ secrets.PUBLIC_RECAPTCHA_SITE_KEY }}
          DISCORD_CLIENT_ID: ${{ secrets.DISCORD_CLIENT_ID }}
          DISCORD_REDIRECT_URI: ${{ secrets.DISCORD_REDIRECT_URI }}
          ADMIN_DISCORD_ID: ${{ secrets.ADMIN_DISCORD_ID }}
        run: |
          echo "Checking GitHub Secrets for Pages..."
          missing=()
          # required
          for v in CLOUDFLARE_API_TOKEN CLOUDFLARE_ACCOUNT_ID NEXT_PUBLIC_API_BASE_URL; do
            if [ -z "${!v}" ]; then
              echo "ERROR: Required secret $v is not set"
              missing+=("$v")
            else
              echo "OK: $v set"
            fi
          done

          # recommended (warn only)
          for v in DISCORD_CLIENT_ID DISCORD_REDIRECT_URI ADMIN_DISCORD_ID; do
            if [ -z "${!v}" ]; then
              echo "WARN: Recommended secret/variable $v is not set"
            else
              echo "OK: $v set"
            fi
          done

          # PUBLIC_RECAPTCHA_SITE_KEY is required for the support form to function (build-time embedding)
          if [ -z "${PUBLIC_RECAPTCHA_SITE_KEY}" ]; then
            echo "ERROR: Required secret PUBLIC_RECAPTCHA_SITE_KEY is not set" >&2
            missing+=("PUBLIC_RECAPTCHA_SITE_KEY")
          else
            echo "OK: PUBLIC_RECAPTCHA_SITE_KEY set"
          fi

          if [ ${#missing[@]} -ne 0 ]; then
            echo "One or more required secrets are missing. Aborting workflow." >&2
            exit 1
          fi
      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'frontend/dashboard/package-lock.json'
      - name: Install dependencies for Dashboard
        run: |
          cd frontend/dashboard
          npm ci
      - name: Install Wrangler
        run: npm install -g wrangler
      - name: Build Dashboard
        env:
          NEXT_PUBLIC_DISCORD_CLIENT_ID: ${{ secrets.DISCORD_CLIENT_ID }}
          NEXT_PUBLIC_DISCORD_REDIRECT_URI: ${{ secrets.DISCORD_REDIRECT_URI }}
          NEXT_PUBLIC_API_BASE_URL: ${{ secrets.NEXT_PUBLIC_API_BASE_URL }}
          NEXT_PUBLIC_ADMIN_IDS: ${{ secrets.ADMIN_DISCORD_ID }}
        run: |
          cd frontend/dashboard
          
          # .env.productionファイルを生成（Next.jsが確実に読み込むように）
          echo "Creating .env.production file..."
          cat > .env.production << EOF
          NEXT_PUBLIC_DISCORD_CLIENT_ID=${NEXT_PUBLIC_DISCORD_CLIENT_ID}
          NEXT_PUBLIC_DISCORD_REDIRECT_URI=${NEXT_PUBLIC_DISCORD_REDIRECT_URI}
          NEXT_PUBLIC_API_BASE_URL=${NEXT_PUBLIC_API_BASE_URL}
          NEXT_PUBLIC_ADMIN_IDS=${NEXT_PUBLIC_ADMIN_IDS}
          EOF
          
          # 環境変数のデバッグ出力（値は表示しない）
          echo "=== Environment Variables Check ==="
          echo "NEXT_PUBLIC_DISCORD_CLIENT_ID: ${NEXT_PUBLIC_DISCORD_CLIENT_ID:+SET}${NEXT_PUBLIC_DISCORD_CLIENT_ID:-EMPTY}"
          echo "NEXT_PUBLIC_DISCORD_REDIRECT_URI: ${NEXT_PUBLIC_DISCORD_REDIRECT_URI:+SET}${NEXT_PUBLIC_DISCORD_REDIRECT_URI:-EMPTY}"
          echo "NEXT_PUBLIC_API_BASE_URL: ${NEXT_PUBLIC_API_BASE_URL:+SET}${NEXT_PUBLIC_API_BASE_URL:-EMPTY}"
          echo "NEXT_PUBLIC_ADMIN_IDS: ${NEXT_PUBLIC_ADMIN_IDS:+SET}${NEXT_PUBLIC_ADMIN_IDS:-EMPTY}"
          echo "==================================="
          
          # REDIRECT_URI の値をマスクして一部表示（デバッグ用）
          if [ -n "$NEXT_PUBLIC_DISCORD_REDIRECT_URI" ]; then
            echo "REDIRECT_URI starts with: ${NEXT_PUBLIC_DISCORD_REDIRECT_URI:0:25}..."
          fi
          
          # GitHub Secretsの設定を確認
          if [ -z "$NEXT_PUBLIC_DISCORD_CLIENT_ID" ]; then
            echo "⚠️ WARNING: DISCORD_CLIENT_ID secret is not set in GitHub!"
          fi
          if [ -z "$NEXT_PUBLIC_DISCORD_REDIRECT_URI" ]; then
            echo "⚠️ WARNING: DISCORD_REDIRECT_URI secret is not set in GitHub!"
          fi
          if [ -z "$NEXT_PUBLIC_API_BASE_URL" ]; then
            echo "⚠️ WARNING: NEXT_PUBLIC_API_BASE_URL secret is not set in GitHub!"
          fi
          if [ -z "$NEXT_PUBLIC_ADMIN_IDS" ]; then
            echo "⚠️ WARNING: ADMIN_DISCORD_ID secret is not set in GitHub!"
          fi
          
          npm run build
          npm run export
      - name: Deploy Dashboard to Cloudflare Pages
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          cd frontend/dashboard
          # プロジェクトを作成（存在しない場合のみ）
          echo "Creating Dashboard project if it doesn't exist..."
          wrangler pages project create rectbot-dashboard --production-branch=main --compatibility-date=2024-09-18 2>/dev/null || echo "Project already exists"
          
          # デプロイ実行
          echo "Deploying Dashboard to Pages..."
          wrangler pages deploy ./out --project-name=rectbot-dashboard --branch main
          
          echo "✅ Dashboard deployment complete!"
          echo "Note: Environment variables are embedded at build time for static exports."
      - name: Install Bun for Astro
        run: curl -fsSL https://bun.sh/install | bash
        shell: bash
      - name: Add Bun to PATH
        run: echo "$HOME/.bun/bin" >> $GITHUB_PATH
        shell: bash
      - name: Install dependencies for Astro
        run: |
          cd frontend/astro
          bun install
      - name: Build Astro frontend
        env:
          PUBLIC_API_BASE_URL: ${{ secrets.NEXT_PUBLIC_API_BASE_URL }}
          PUBLIC_RECAPTCHA_SITE_KEY: ${{ secrets.PUBLIC_RECAPTCHA_SITE_KEY }}
        run: |
          cd frontend/astro
          # Astro uses import.meta.env for PUBLIC_* variables at build time
          echo "Creating .env.production for Astro build..."
          # Use printf to avoid YAML heredoc indentation parsing issues
          printf 'PUBLIC_API_BASE_URL=%s\nPUBLIC_RECAPTCHA_SITE_KEY=%s\n' "${PUBLIC_API_BASE_URL}" "${PUBLIC_RECAPTCHA_SITE_KEY}" > .env.production

          # Debug: show presence (masked) without printing values
          echo "PUBLIC_API_BASE_URL=${PUBLIC_API_BASE_URL:+SET}"
          echo "PUBLIC_RECAPTCHA_SITE_KEY=${PUBLIC_RECAPTCHA_SITE_KEY:+SET}"

          # Show .env.production exists and print masked contents for debugging
          echo "Listing .env.production:" && ls -l .env.production || true
          echo "Masked .env.production content:" && sed -E 's/=.*/=MASKED/' .env.production || true

          bun run build
      - name: Verify Astro build embedded PUBLIC_* envs
        run: |
          set -euo pipefail
          cd frontend/astro
          echo "Verifying build does not contain literal import.meta.env references..."
          # Search for any literal references and print file/line snippets to help debugging
          MISSING=false
          for key in PUBLIC_RECAPTCHA_SITE_KEY PUBLIC_API_BASE_URL; do
            pattern="import.meta.env.${key}"
            if grep -R --line-number --fixed-strings "$pattern" dist >/tmp/grep_matches 2>/dev/null; then
              echo "ERROR: $key was not embedded into the build output. Found occurrences:" >&2
              cat /tmp/grep_matches >&2 || true
              # Print small context for each match
              while IFS=: read -r file line _; do
                echo "---- Context from $file:$line ----" >&2
                start=$((line>3 ? line-3 : 1))
                end=$((line+3))
                sed -n "${start},${end}p" "$file" >&2 || true
              done < /tmp/grep_matches
              MISSING=true
            else
              echo "OK: $key appears embedded or replaced in build output."
            fi
          done
          if [ "$MISSING" = true ]; then
            echo "This usually means the build did not receive the PUBLIC_* env at build time or the code references import.meta.env at runtime." >&2
            exit 1
          fi
      - name: Deploy Astro to Cloudflare Pages
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          cd frontend/astro
          # プロジェクトを作成（存在しない場合のみ）
          echo "Creating Astro project if it doesn't exist..."
          wrangler pages project create rectbot --production-branch=main --compatibility-date=2024-09-18 2>/dev/null || echo "Project already exists or creation failed"
          
          # デプロイ実行
          echo "Deploying Astro to Pages..."
          wrangler pages deploy ./dist --project-name=rectbot
